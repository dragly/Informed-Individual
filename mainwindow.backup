-- mainwindow.h --

#ifndef MAINWINDOW_H
#define MAINWINDOW_H

#include <QtGui/QMainWindow>
class QLabel;
class QProgressBar;
class QNetworkAccessManager;
class QNetworkReply;

namespace Ui
{
    class MainWindow;
}

class MainWindow : public QMainWindow
{
    Q_OBJECT

public:
    MainWindow(QWidget *parent = 0);
    ~MainWindow();

private:
    Ui::MainWindow *ui;
    QNetworkAccessManager *m_network;

private slots:
    void slotTest();
    void slotDecode(int type, const QString &text);
    void slotRequestFinished(QNetworkReply *reply);
};

#endif // MAINWINDOW_H


-- mainwindow.cpp

#include "mainwindow.h"
#include "ui_mainwindow.h"
#include <zbar/QZBar.h>
#include <iostream>
#include <QDebug>
#include <QThread>
#include <QtCore/QUrl>
#include <QtGui/QLabel>
#include <QtGui/QProgressBar>
#include <QtGui/QVBoxLayout>
#include <QtNetwork/QNetworkAccessManager>
#include <QtNetwork/QNetworkRequest>
#include <QtNetwork/QNetworkReply>
#include <QtNetwork/QNetworkProxy>
#include <QtXml/QDomDocument>

static const char *REQUEST_URL = "http://jan-ken.appspot.com/myservlet/";
static const char *USER = "user";
static const char *PASSWORD = "asas";

using namespace std;
using namespace zbar;

MainWindow::MainWindow(QWidget *parent)
    : QMainWindow(parent), ui(new Ui::MainWindow)
{
    ui->setupUi(this);
    connect(ui->btn_test,SIGNAL(clicked()),SLOT(slotTest()));

}

MainWindow::~MainWindow()
{
    delete ui;
}

void MainWindow::slotTest() {
    cout << "slot" << endl;
    m_network = new QNetworkAccessManager(this);
    QNetworkRequest request;
    request.setUrl(QUrl(REQUEST_URL));
    QNetworkReply *reply = m_network->get(request);
    QObject::connect(m_network, SIGNAL(finished(QNetworkReply *)),
                                SLOT(slotRequestFinished(QNetworkReply *)));
    //QZBar *zbar = new QZBar(this);
    //zbar->setVideoDevice("/dev/video0");
    //zbar->setVideoEnabled(true);
    //connect(zbar,SIGNAL(decoded(int,QString)),SLOT(slotDecode(int,QString)));
}

void MainWindow::slotDecode(int type, const QString &text) {
    cout << text.toStdString() << endl;
}
void MainWindow::slotRequestFinished(QNetworkReply *reply)
{
    //m_progress->setValue(0);
    cout << "testing" << endl;
    if (reply->error() > 0) {
        QString string = ("Error number = " + reply->errorString());
        cout << string.toStdString() << endl;

    }
    else {
        QByteArray data = reply->readAll();
        QDomDocument doc;
        doc.setContent(data);
        QDomNodeList nodes = doc.elementsByTagName("INFO");

        if (nodes.size() > 0) {
            cout << (nodes.at(0).toElement().attribute("CASH")).toStdString() << endl;
        }
    }
}
